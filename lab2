ruleset lab_2 {
  meta {
    configure using account_sid = ""
                    auth_token = ""
    provides
        send_sms,get_log
  }
 
  global {
    send_sms = defaction(to, from, message) {
       base_url = <<https://#{account_sid}:#{auth_token}@api.twilio.com/2010-04-01/Accounts/#{account_sid}/>>
       http:post(base_url + "Messages.json", form = {
                "From":from,
                "To":to,
                "Body":message
            })
    }
    
   get_log = function(pageSize,from) {
      base_url = <<https://#{account_sid}:#{auth_token}@api.twilio.com/2010-04-01/Accounts/#{account_sid}/>>;
      page_filter = (pageSize != null) => ("?PageSize=" + pageSize + "&") | "?";
      from_filter = (from != null) => ("From=" + from) | "";
      ext_url = page_filter + from_filter;
     
     
      msg = http:get(base_url + "Messages.json" + ext_url).decode()["content"].decode();
      msg
    }
  }
  
  
}

ruleset use_lab_2 {
 meta {
    use module lesson_keys
    use module lab_2 alias twilio
        with account_sid = keys:twilio{"account_sid"}
             auth_token =  keys:twilio{"auth_token"}
    shares messages, __testing
  }
  
  global {
    messages= function(pageSize,from) {
      result = twilio:get_log(pageSize,from);
      result
    }
    
    __testing = { "queries": [ { "name": "messages", "args": [ "pageSize","from"] },
                           { "name": "__testing" } ],
              "events": [ { "domain": "sms", "type": "hello" }]
            }
  }
 
  rule test_send_sms {
    select when test new_message
    twilio:send_sms(event:attr("to"),
                    event:attr("from"),
                    event:attr("message")
                   )
    
  }
  
  
}

ruleset manage_sensors {
  meta {
    use module io.picolabs.wrangler alias wrangler
    
    shares __testing, temperatures, sensors
  }
  global {
    
    sensors = function () {
      result = ent:sensors;
      result
    }
    
    //change Active sensors to sensors
    temperatures = function () {
      result = ent:sensors.map( function(x) {
                                  wrangler:skyQuery(x[1],"temperature_store","temperatures",null)
                                });
      result
    }
    
    __testing = { "queries":
      [ { "name": "__testing" }
      , { "name": "sensors"}
      , { "name": "temperatures"}
      ] , "events":
      [ { "domain": "sensor", "type": "new_sensor", "attrs" : ["name"] }
      , { "domain": "sensor", "type": "unneeded_sensor", "attrs": [ "name" ] }
      , { "domain": "sensor", "type": "clearList"}
      , { "domain": "test", "type": "sensors"}
      , { "domain": "test", "type": "add_temps"}
      ]
    }
  }
  
  rule test_create_sensors {
    select when test sensors
    
    always {
      raise sensor event "new_sensor"
        attributes {
          "name" : "ONE"
      };
      raise sensor event "new_sensor"
        attributes {
          "name" : "TWO"
      };
      raise sensor event "new_sensor"
        attributes {
          "name" : "THREE"
      };
      
      raise sensor event "test_add_temperatures"
      attributes {
      };
      
      raise sensor event "unneeded_sensor"
        attributes {
          "name" : "TWO"
      };
      
      
    }
  }
  
  rule clear_list {
    select when sensor clearList
    
    always {
      clear ent:sensors;
    }
  }
  
  rule test_add_temperatures {
    
    select when test add_temps
      foreach ent:sensors setting (eci)
        foreach [10,50,100] setting (x)
        
          pre {
              timestamp = event:attr("timestamp").klog("time: ");
          }
          
          event:send({"eci": eci[1], "domain":"wovyn", "type":"new_temperature_reading", "attrs":{"temperature":x, "timestamp":"sept 21"}});
  }
  
  rule create_sensor {
    select when sensor new_sensor
   
   
    fired {
      ent:newChildName := event:attr("name");
      raise wrangler event "child_creation"
        attributes {
          "name" : event:attr("name"),
          "rids" : ["sensor_profile"
                   ,"wovyn_base"
                   ,"temperature_store"]
        } if (ent:sensors.none(function(x) {ent:newChildName == x}))
    }
   
    
  }
  
  rule new_sensor_initialized {
    select when wrangler child_initialized
    pre {
      temp = [[event:attr("name"),event:attr("eci")]];
      attributes = {
          "new_deviceName" : ent:newChildName,
          "new_location" : "Provo",
          "new_threshold": 85,
          "new_recipient": "+19188070495"
      };
    }
    event:send({"eci":event:attr("eci"), "domain":"sensor", "type":"profile_updated", "attrs":attributes});
    
    
    always {
      
      ent:sensors := (ent:sensors != null) => ent:sensors.append(temp) | temp;
      
      
    }
    
  }
  
  
  rule delete_sensor { 
    select when sensor unneeded_sensor
    
    always {
      ent:sensors := ent:sensors.filter(function(x) {x[0] != event:attr("name")});
      
      raise wrangler event "child_deletion"
        attributes {
          "name" : event:attr("name")
        }
    }
    
  }
  
  
  
  
  
  
  
}

ruleset gossip {

  meta {

    use module io.picolabs.wrangler alias wrangler

    use module io.picolabs.subscription alias subscription

    

    shares __testing, peer, getPeer, debugSeenMessages, debugMySeenMessages, debugRumorMessages, debugTxToOriginId, prepareMessage, needSomething

    , SeenLessThanMe, theyNeedMessage, prepareRumors, highestSequence

  }

  global {

    

    

    __testing = { "queries":

      [ { "name": "__testing" }

      , { "name": "peer"}

      , { "name": "getPeer"}

      , { "name": "debugSeenMessages"}

      , { "name": "debugMySeenMessages"}

      , { "name": "debugRumorMessages"}

      , { "name": "debugTxToOriginId"}

      , { "name": "prepareMessage"}

      , { "name": "needSomething", "args":["originID"]}

      , { "name": "highestSequence", "args":["subscriber"]}

      , { "name": "prepareRumors", "args":["subscriber"]}

      , { "name": "SeenLessThanMe", "args":["myKey","seenMessages","mySeenMessages"]}

      , { "name": "theyNeedMessage", "args":["subscriber","rumor"]}

      ] , "events":

      [ { "domain": "gossip", "type": "rumor", "attrs" : ["messageID", "sequence", "message"] }

      , { "domain": "gossip", "type": "seen", "attrs": [ "name" ] }

      , { "domain": "gossip", "type": "newMessage", "attrs": ["message"] }

      , { "domain": "gossip", "type": "heartbeat"}

      , { "domain": "gossip", "type": "clearAll"}

      ]

    }

    

    peer = function () {

      peer = meta:picoId;

      peer

    }

    SeenLessThanMe = function(myKey, seenMessages, mySeenMessages) {

      seenMessages = seenMessages.decode().klog("seenMessages:"); mySeenMessages = mySeenMessages.decode();

      result = (seenMessages == null) => true |(seenMessages[myKey] == null) => true |

      (seenMessages[myKey] < mySeenMessages[myKey]) => true | 

      false;

      result

    }

    

    

    

  

    

    getPeer = function() {

     

      

      Tx_array = subscription:established().filter(function(v){v{"Rx_role"} == "Peer"});

      

      Tx_array = Tx_array.klog("stuff: ").filter(function(x){needSomething(x)});


      index = random:integer(0,Tx_array.length()-1);

      //peer = Tx_array[index];

      peer = {};

      peer["Tx"] = Tx_array.klog("after: ")[index]["Tx"];

      peer["Rx"] = Tx_array[index]["Rx"];

      peer

    }

    
    
      needSomething = function(originID) {

      theirSeenMessages = ent:seenMessages[originID];

      mySeenKeys = ent:mySeenMessages.keys();

      result = mySeenKeys.any(function(x) {

        SeenLessThanMe(x, theirSeenMessages, ent:mySeenMessages)

      });

      result

    }
    
    debugMySeenMessages = function() {

      result = ent:mySeenMessages;

      result

    }

    

    debugSeenMessages = function() {

      result = ent:seenMessages;

      result

    }

    

    debugRumorMessages = function() {

      result = ent:rumorMessages;

      result

    }

    

    debugTxToOriginId = function() {

      result = ent:TxToOriginId;

      result

    }

    
    theyNeedMessage = function(subscriber, rumor){

      rumor = rumor.decode();

      result = (ent:seenMessages[subscriber][rumor["messageID"]]== null) => true |

      (ent:seenMessages[subscriber][rumor["messageID"]] < rumor["sequence"]) => true | false;

      result

    }

    

    prepareRumors = function(subscriber) {

      result = ent:rumorMessages.filter(function(x){

          theyNeedMessage(subscriber, x)

      });

      result

    }

    

    prepareRumor = function(subscriber) {

      result = prepareRumors(subscriber);

      rand = random:integer(0,result.length());

      result = result[rand];

      result

    }

    

    prepareMessage = function(subscriber) {

      message = {};

      rand = random:integer(0,1);

      message["type"] = (rand) => "seen" | "rumor";

      message["message"] = (rand) => ent:mySeenMessages | prepareRumor(subscriber);

      
      message.klog("this is the message: ")

    }

    

    
    

    send = defaction(subscriber, message) {


      event:send({"eci": subscriber["Tx"], "domain":"gossip", "type": message["type"], 

      "attrs":{"message": message["message"],

              "originID": meta:picoId,

              "Rx": subscriber["Rx"]

      }});

    }

    

    next = function (a,v) {

      result = (v == a + 1) => v | a;

      result

    }

    

  
    highestSequence = function(subscriber) {

      rumors = ent:rumorMessages.filter(function(x){

        (x["messageID"] == subscriber)

      });

      currentSeq = 0;

      rumors = rumors.map(function(x){

        x["sequence"]

      });

      rumors = rumors.sort("numeric");

      rumors = (rumors.head() == 0 && rumors.length() > 0) => rumors.reduce(next,0) | null;

      rumors

    }

  }



  rule gossip_heartbeat {

    select when gossip heartbeat

    pre {

      peer = getPeer();

      message = prepareMessage(peer.klog("this is gossip peer: "));

    }

    send(peer, message);

  }

  

  rule add_message {

    select when gossip newMessage

    

    always {

      message = {};

      message["messageID"] = meta:picoId;

      message["sequence"] = ent:myMessageNumber;

      message["message"] = event:attr("message");

      

      ent:rumorMessages := (ent:rumorMessages != null) => ent:rumorMessages.append(message) | message;

    

      temp = {};

      temp[meta:picoId] = ent:myMessageNumber;

      ent:mySeenMessages := temp;

      

      

      ent:myMessageNumber := ent:myMessageNumber + 1;

    }

  }



  rule clearAll {

   select when gossip clearAll

   

    always {

      ent:myMessageNumber := 0;

      ent:rumorMessages := [];

      ent:seenMessages := {};

      ent:mySeenMessages := {};

      ent:TxToOriginId := {};

    }

  }



  rule intialization {

    select when wrangler ruleset_added where event:attr("rids") >< meta:rid

    

    always {

      ent:myMessageNumber := 0;

      ent:rumorMessages := [];

      ent:seenMessages := {};

      ent:mySeenMessages := {};

      ent:TxToOriginId := {};

    }

  }



  rule rumor_event {

    select when gossip rumor

      foreach event:attr("message").decode() setting (x)

    always {

      message = {};

      message["messageID"] = x["messageID"];

      message["sequence"] = x["sequence"].decode();

      message["message"] = x["message"];

      

      ent:rumorMessages := (ent:rumorMessages != null) => ent:rumorMessages.append(message) | message 

      if (ent:rumorMessages.none(function(y){

        ((y["messageID"] == message["messageID"]) && (y["sequence"].decode() == message["sequence"].decode()))
      })).klog("ok to add rumor");

      


      

      temp = ent:mySeenMessages.klog("mySeenMessages");

      highest = highestSequence(message["messageID"]);

      temp[message["messageID"]] = highest;


      ent:mySeenMessages := temp if (highest != null);

    }

  }



  rule seen_event {

    select when gossip seen


    always {

      seenArray = event:attr("message");

      originID = event:attr("originID").klog("originID");

      Tx = event:attr("Rx");

      temp = ent:TxToOriginId;

      temp[originID] = Tx;

      ent:TxToOriginId := temp;

      

      temp = ent:seenMessages;

      temp[originID] = seenArray;

      ent:seenMessages := temp.klog("seen Messages");

      

      message = {};

      message["type"] = "rumor";

      rumors = prepareRumors(subscriber);

      message["message"] = rumors;

      send(originID, message) if (rumors.length() != 0);

    }

  }

  

  

  rule subscription_request_recieved {

    select when wrangler inbound_pending_subscription_added
    

    fired {

      raise wrangler event "pending_subscription_approval"

        attributes event:attrs

    }

  }

}
